//! # Host API Module
//!
//! This module defines the host-side API for interactions with Wasm modules. It includes
//! the necessary bindings generated by `wasmtime::component::bindgen!` and implements
//! the host functions that Wasm modules can call, such as sending requests to the
//! Kubernetes API and handling asynchronous responses.

use std::future::Future;
use std::mem;

use tokio::sync::oneshot;
use tracing::{error, info};
use wasmtime::component::Resource;

use crate::host::state::State;

pub mod bindings {
    wasmtime::component::bindgen!({
        async: true,
        with: {
            "wasm-operator:operator/parent-api/future-response": crate::host::api::FutureResponse
        }
    });
}

#[derive(Debug)]
pub struct FutureResponse {
    pub receiver:
        oneshot::Receiver<Result<bindings::wasm_operator::operator::k8s_http::Response, String>>,
}

impl std::fmt::Display for bindings::wasm_operator::operator::k8s_http::Method {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            bindings::wasm_operator::operator::k8s_http::Method::Get => write!(f, "GET"),
            bindings::wasm_operator::operator::k8s_http::Method::Post => write!(f, "POST"),
            bindings::wasm_operator::operator::k8s_http::Method::Put => write!(f, "PUT"),
            bindings::wasm_operator::operator::k8s_http::Method::Delete => write!(f, "DELETE"),
            bindings::wasm_operator::operator::k8s_http::Method::Patch => write!(f, "PATCH"),
        }
    }
}

impl bindings::wasm_operator::operator::parent_api::HostFutureResponse for State {
    fn get(
        &mut self,
        entry: Resource<FutureResponse>,
    ) -> impl Future<Output = Result<bindings::wasm_operator::operator::k8s_http::Response, String>> + Send
    {
        Box::pin(async move {
            let future = self.resources.get_mut(&entry).map_err(|e| e.to_string())?;
            let rx = mem::replace(&mut future.receiver, oneshot::channel().1);
            rx.await.map_err(|e| e.to_string())?
        })
    }

    fn drop(
        &mut self,
        rep: Resource<FutureResponse>,
    ) -> impl Future<Output = Result<(), anyhow::Error>> + Send {
        Box::pin(async move {
            self.resources.delete(rep)?;
            Ok(())
        })
    }
}

impl bindings::wasm_operator::operator::parent_api::Host for State {
    fn send_request(
        &mut self,
        request: bindings::wasm_operator::operator::k8s_http::Request,
    ) -> impl Future<Output = Result<Resource<FutureResponse>, String>> + Send {
        info!("Host received request from WASM component: {:?}", request);

        let (sender, receiver) = oneshot::channel();
        let k8s_service = self.kubernetes_service.clone();

        tokio::spawn(async move {
            let result = k8s_service.execute_request(request).await;
            if sender.send(result).is_err() {
                error!("Failed to send response to WASM component: receiver was dropped");
            }
        });

        let future_response = FutureResponse { receiver };
        let result = self
            .resources
            .push(future_response)
            .map_err(|e| e.to_string());

        std::future::ready(result)
    }
}
