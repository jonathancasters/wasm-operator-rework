//! # Host API Module
//!
//! This module defines the host-side API for interactions with Wasm modules. It includes
//! the necessary bindings generated by `wasmtime::component::bindgen!` and implements
//! the host functions that Wasm modules can call, such as sending requests to the
//! Kubernetes API and handling asynchronous responses.

use crate::host::state::State;
use std::future::Future;

pub mod bindings {
    wasmtime::component::bindgen!({
            async: true,
            path: "wit/",
            world: "kube-operator"
    });
}

impl bindings::local::operator::types::Host for State {}

impl bindings::local::operator::kubernetes::Host for State {
    fn log(
        &mut self,
        level: bindings::local::operator::types::LogLevel,
        message: String,
    ) -> impl Future<Output=()> + Send {
        async move {
            match level {
                bindings::local::operator::types::LogLevel::Trace => tracing::trace!(message),
                bindings::local::operator::types::LogLevel::Debug => tracing::debug!(message),
                bindings::local::operator::types::LogLevel::Info => tracing::info!(message),
                bindings::local::operator::types::LogLevel::Warn => tracing::warn!(message),
                bindings::local::operator::types::LogLevel::Error => tracing::error!(message),
            }
        }
    }

    fn get_resource(
        &mut self,
        kind: String,
        name: String,
        namespace: String,
    ) -> impl Future<Output=Result<String, String>> + Send {
        async move {
            self.kubernetes_service
                .get_resource(&kind, &name, &namespace)
                .await
                .map_err(|e| e.to_string())
        }
    }

    fn create_resource(
        &mut self,
        kind: String,
        namespace: String,
        resource_json: String,
    ) -> impl Future<Output=Result<(), String>> + Send {
        async move {
            self.kubernetes_service
                .create_resource(&kind, &namespace, &resource_json)
                .await
                .map_err(|e| e.to_string())
        }
    }

    fn update_resource(
        &mut self,
        kind: String,
        name: String,
        namespace: String,
        resource_json: String,
    ) -> impl Future<Output=Result<(), String>> + Send {
        async move {
            self.kubernetes_service
                .update_resource(&kind, &name, &namespace, &resource_json)
                .await
                .map_err(|e| e.to_string())
        }
    }

    fn delete_resource(
        &mut self,
        kind: String,
        name: String,
        namespace: String,
    ) -> impl Future<Output=Result<(), String>> + Send {
        async move {
            self.kubernetes_service
                .delete_resource(&kind, &name, &namespace)
                .await
                .map_err(|e| e.to_string())
        }
    }
}
