package wasm-operator:operator;

interface types {
    type async-id = u64;
}

interface http {
    enum method {
        get,
        post,
        put,
        delete,
        patch,
    }

    record header {
        name: string,
        value: string,
    }

    record request {
        method: method,
        uri: string,
        headers: list<header>,
        body: list<u8>, // Body as raw bytes
    }

    record response {
        status: u16,
        headers: list<header>,
        body: list<u8>, // Body as raw bytes
    }
}


interface parent-api {
    use http.{request};
    use types.{async-id};

    send-request: func(req: request) -> result<async-id, string>;
}

interface child-api {
    use http.{response};
    use types.{async-id};

    handle-response: func(id: async-id, res: response);
    start: func();
}

world operator {
    include wasi:cli/imports@0.2.6;

    import parent-api;
    export child-api;
}