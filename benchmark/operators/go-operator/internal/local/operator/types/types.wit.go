// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package types represents the imported interface "local:operator/types@0.2.0".
package types

import (
	"go.bytecodealliance.org/cm"
)

// WatchRequest represents the record "local:operator/types@0.2.0#watch-request".
//
//	record watch-request {
//		kind: string,
//		namespace: string,
//	}
type WatchRequest struct {
	_         cm.HostLayout `json:"-"`
	Kind      string        `json:"kind"`
	Namespace string        `json:"namespace"`
}

// ReconcileResult represents the variant "local:operator/types@0.2.0#reconcile-result".
//
//	variant reconcile-result {
//		ok,
//		error(string),
//		requeue(u32),
//	}
type ReconcileResult cm.Variant[uint8, string, string]

// ReconcileResultOK returns a [ReconcileResult] of case "ok".
func ReconcileResultOK() ReconcileResult {
	var data struct{}
	return cm.New[ReconcileResult](0, data)
}

// OK returns true if [ReconcileResult] represents the variant case "ok".
func (self *ReconcileResult) OK() bool {
	return self.Tag() == 0
}

// ReconcileResultError returns a [ReconcileResult] of case "error".
func ReconcileResultError(data string) ReconcileResult {
	return cm.New[ReconcileResult](1, data)
}

// Error returns a non-nil *[string] if [ReconcileResult] represents the variant case "error".
func (self *ReconcileResult) Error() *string {
	return cm.Case[string](self, 1)
}

// ReconcileResultRequeue returns a [ReconcileResult] of case "requeue".
func ReconcileResultRequeue(data uint32) ReconcileResult {
	return cm.New[ReconcileResult](2, data)
}

// Requeue returns a non-nil *[uint32] if [ReconcileResult] represents the variant case "requeue".
func (self *ReconcileResult) Requeue() *uint32 {
	return cm.Case[uint32](self, 2)
}

var _ReconcileResultStrings = [3]string{
	"ok",
	"error",
	"requeue",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v ReconcileResult) String() string {
	return _ReconcileResultStrings[v.Tag()]
}

// EventType represents the enum "local:operator/types@0.2.0#event-type".
//
//	enum event-type {
//		added,
//		modified,
//		deleted
//	}
type EventType uint8

const (
	EventTypeAdded EventType = iota
	EventTypeModified
	EventTypeDeleted
)

var _EventTypeStrings = [3]string{
	"added",
	"modified",
	"deleted",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e EventType) String() string {
	return _EventTypeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e EventType) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *EventType) UnmarshalText(text []byte) error {
	return _EventTypeUnmarshalCase(e, text)
}

var _EventTypeUnmarshalCase = cm.CaseUnmarshaler[EventType](_EventTypeStrings[:])

// ReconcileRequest represents the record "local:operator/types@0.2.0#reconcile-request".
//
//	record reconcile-request {
//		event-type: event-type,
//		name: string,
//		namespace: string,
//		resource-json: string,
//	}
type ReconcileRequest struct {
	_            cm.HostLayout `json:"-"`
	EventType    EventType     `json:"event-type"`
	Name         string        `json:"name"`
	Namespace    string        `json:"namespace"`
	ResourceJSON string        `json:"resource-json"`
}

// LogLevel represents the enum "local:operator/types@0.2.0#log-level".
//
//	enum log-level {
//		trace,
//		debug,
//		info,
//		warn,
//		error
//	}
type LogLevel uint8

const (
	LogLevelTrace LogLevel = iota
	LogLevelDebug
	LogLevelInfo
	LogLevelWarn
	LogLevelError
)

var _LogLevelStrings = [5]string{
	"trace",
	"debug",
	"info",
	"warn",
	"error",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e LogLevel) String() string {
	return _LogLevelStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e LogLevel) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *LogLevel) UnmarshalText(text []byte) error {
	return _LogLevelUnmarshalCase(e, text)
}

var _LogLevelUnmarshalCase = cm.CaseUnmarshaler[LogLevel](_LogLevelStrings[:])
